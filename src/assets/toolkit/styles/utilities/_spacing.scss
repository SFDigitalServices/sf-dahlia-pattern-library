//
// Spacing/Unit Variables and Objects
//

$units__default-unit: 16px;
$default-unit: $units__default-unit;
$units__default-breakpoint: $medium-bottom;
$units__include-box-sizing: true;

// OPTIONS:
// * "selector-name": String (no spaces and can't start with a number). Optional. Used to change output selector name.
// * "selector-suffix": String (no spaces). Optional. This is appended to the end of the output selector
// * "media-query-max": Number. Optional. Uses `@media screen (max-width: "this value"){}`
// * "unit--media-query-max":Number. Optional; Required when `media-query-max` is used. Is applied unit to `variation` options within the media query. Fallback unit is `unit`.
// * "media-query-min": Number. Optional. Uses `@media screen (min-width: "this value"){}``
// * "unit--media-query-min": Number. Optional; Required when `media-query-min` is used. Is applied unit to `variation` options within the media query. Fallback unit is `unit`.
// * "unit": Required. Number. Required. Default unit. Is fallback unit for `unit--media-query-min` and `unit--media-query-max` when `media-query-min` and `media-query-max` are used and no unit is applied.
// * "variations": Sass Map. Required. Contains the variations of output properites.
// *  "base": Options: true | false | short. Required. Outputs default unit. When value is `short` this key is used to output `padding` and `margin` property's shorthand.
// *  "top": Boolean. Required. Outputs variation of property (`padding-top`, `margin-top`)
// *  "right": Boolean. Required. Outputs variation of property (`padding-right`, `margin-right`)
// *  "bottom": Boolean. Required. Outputs variation of property (`padding-bottom`, `margin-bottom`)
// *  "left": Boolean. Required. Outputs variation of property (`padding-left`, `margin-left`)

$units: (
  "padding": ( // optional key, used to out padding units
    "default": ( // "`default` is required" under "padding" key
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit,
      "unit": $default-unit,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "custom-name-demo": ( 
      "selector-name": "spacing",
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit + $default-unit,
      "unit": $default-unit + $default-unit,
      "variations": (
        "base": true,
        "top": false,
        "right": false,
        "bottom": false,
        "left": false
      )
    ),
    "two-times": (
      "suffix": "--2x",
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit * 2,
      "unit": $default-unit * 2,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "three-times": (
      "suffix": "--3x",
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit * 3,
      "unit": $default-unit * 3,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "four-times": (
      "suffix": "--4x",
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit * 4,
      "unit": $default-unit * 4,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "one-half-times": (
      "suffix": "--3halves",
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit * 1.5,
      "unit": $default-unit * 2,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "half-sized": (
      "suffix": "--half",
      "unit": $default-unit / 2,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    )
  ),
  "margin": ( // optional key, used to out padding units
    "default": ( // "`default` is required" under "padding" key
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit,
      "unit": $default-unit,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "two-times": (
      "suffix": "--2x",
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit * 2,
      "unit": $default-unit * 2,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "one-half-times": (
      "suffix": "--3halves",
      "media-query-max": $units__default-breakpoint, 
      "unit--media-query-max": $default-unit, 
      "media-query-min": $units__default-breakpoint,
      "unit--media-query-min": $default-unit * 1.5,
      "unit": $default-unit * 1.5,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    ),
    "half-sized": (
      "suffix": "--half",
      "unit": $default-unit / 2,
      "variations": (
        "base": true,
        "top": true,
        "right": true,
        "bottom": true,
        "left": true
      )
    )
  )
);

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////

/*! * [Unit Space](https://github.com/kevinmack18/SASS-Margin-and-Padding-Starter) */
 // * Github: https://github.com/kevinmack18/SASS-Margin-and-Padding-Starter
 // * Demo: http://kevinmack18.github.io/SASS-Margin-and-Padding-Starter/
 // * Released under the MIT license
 // * https://github.com/kevinmack18/SASS-Margin-and-Padding-Starter/blob/master/LICENSE
 // * Version: v3.0.1
 // * Date: 2015-07-30

@if ( $units__include-box-sizing ) {
  *, *:before, *:after {
    box-sizing: border-box;
  }
}

@mixin generateUnits($property: padding, $version: default, $variation: base ) {
  $versions: map-get($units, $property);
  $values: map-get($versions, $version);
  $unit: if(map-has-key($values, "unit"),map-get($values, "unit"),$default-unit);
  $selector-base: if(map-has-key($values, "selector-name"),map-get($values, "selector-name"),$property);
  $variations: map-get($values, "variations");
  $selector-suffix: if(map-has-key($values, "suffix"),map-get($values, "suffix"),"");
  $media-query-min: if(map-has-key($values, "media-query-min"),map-get($values, "media-query-min"),false);
  $unit--media-query-min: if(map-has-key($values, "unit--media-query-min"),map-get($values, "unit--media-query-min"),$unit);
  $media-query-max: if(map-has-key($values, "media-query-max"),map-get($values, "media-query-max"),false);
  $unit--media-query-max: if(map-has-key($values, "unit--media-query-max"),map-get($values, "unit--media-query-max"),$unit);
  $units-are-controlled-by-breakpoints: ($media-query-min != false and $media-query-max != false);


  @each $variation, $boolean in $variations {

    @if( $variation != "base" ) {

      // create custom placeholder selector for versioning each group in @extend
      $id: if($version == "default", "", $version);

      // Check to see if both have breakpoints
      @if ($units-are-controlled-by-breakpoints == false) {
        %#{$selector-base}-#{$variation}#{$selector-suffix}#{$id} {
          #{$property}-#{$variation}: $unit !important;
        }
      }

      %#{$selector-base}#{$selector-suffix} {
        @if (map-get($variations, "base") == true and (map-get($variations, "base") != "short") ) {
          @extend %#{$selector-base}-#{$variation}#{$selector-suffix}#{$id};
        }
      }

      @if ($media-query-min) {
        @media screen and (min-width: $media-query-min) {
          %#{$selector-base}-#{$variation}#{$selector-suffix}#{$id} {
            #{$property}-#{$variation}: $unit--media-query-min !important;
          }
        }
      }
      @if ($media-query-max) {
        @media screen and (max-width: $media-query-max) {
          %#{$selector-base}-#{$variation}#{$selector-suffix}#{$id} {
            #{$property}-#{$variation}: $unit--media-query-max !important;
          }
        }
      }
    }

    @if( $variation == "base" ) {
      @if (map-get($variations, "base") == "short") {
        %#{$selector-base}#{$selector-suffix} {
          #{$property}: $unit;
        }

        @if ($media-query-min) {
          @media screen and (min-width: $media-query-min) {
            %#{$selector-base}#{$selector-suffix} {
              #{$property}: $unit--media-query-min;
            }
          }
        }
        @if ($media-query-max) {
          @media screen and (max-width: $media-query-max) {
            %#{$selector-base}#{$selector-suffix} {
              #{$property}: $unit--media-query-max;
            }
          }
        }
      }

      .#{$selector-base}#{$selector-suffix} {
        @extend %#{$selector-base}#{$selector-suffix} !optional;
      }
    }

    @if( $variation != "base" and (map-get($variations, $variation) == true) ) {
      $id: if($version == "default", "", $version);

      .#{$selector-base}-#{$variation}#{$selector-suffix} {
        @extend %#{$selector-base}-#{$variation}#{$selector-suffix}#{$id} !optional;
      }
    }
  }
}


// output specific properites only
@mixin units($property: "padding", $version: "default", $variation: (base: true, top: true, right: true, bottom: true, left: true)) {
  $variation-controls: $variation;
  $versions: map-get($units, $property);
  $values: map-get($versions, $version);
  $unit: if(map-has-key($values, "unit"),map-get($values, "unit"),$default-unit);
  $selector-base: if(map-has-key($values, "selector-name"),map-get($values, "selector-name"),$property);
  $variations: map-get($values, "variations");
  $selector-suffix: if(map-has-key($values, "suffix"),map-get($values, "suffix"),"");
  $media-query-min: if(map-has-key($values, "media-query-min"),map-get($values, "media-query-min"),false);
  $unit--media-query-min: if(map-has-key($values, "unit--media-query-min"),map-get($values, "unit--media-query-min"),$unit);
  $media-query-max: if(map-has-key($values, "media-query-max"),map-get($values, "media-query-max"),false);
  $unit--media-query-max: if(map-has-key($values, "unit--media-query-max"),map-get($values, "unit--media-query-max"),$unit);
  $units-are-controlled-by-breakpoints: ($media-query-min != false and $media-query-max != false);

  @each $variation, $boolean in $variation-controls {

    $includeVariation: map-get($variation-controls, $variation);
    $baseDoesNotOveride: if(map-get($variation-controls, "base"), false, true);
    $isBase: ($variation == "base");

    @if( $includeVariation ) {

      @if ($units-are-controlled-by-breakpoints == false) {
        @if ($baseDoesNotOveride) {
          #{$property}-#{$variation}: $unit;
        } @else if ($isBase) {
          #{$property}: $unit !important;
        }
      }

      @if ($media-query-min) {
        @media screen and (min-width: $media-query-min) {
          @if ( $baseDoesNotOveride ) {
            #{$property}-#{$variation}: $unit--media-query-min;
          } @else if ($isBase) {
            #{$property}: $unit--media-query-min;
          }
        }
      }

      @if ($media-query-max) {
        @media screen and (max-width: $media-query-max) {
          @if ( $baseDoesNotOveride ) {
            #{$property}-#{$variation}: $unit--media-query-max;
          } @else if ($isBase) {
            #{$property}: $unit--media-query-max;
          }
        }
      }
    }
  }
}


@each $property, $items in $units {

  $versions: map-get($units, $property);

  @each $version, $options in  $versions {

    @include generateUnits($property, $version, $variation: "inherit");

  }
}


////////////////////////////////////////////////////////
// DEMOS
////////////////////////////////////////////////////////

%no-margin {
  #{h1, h2, h3, h4, h5, h6, p} {
    margin-bottom: 0;
  }
}

.spacing-verticals {
  @extend %margin-top;
  @extend %margin-bottom;
}

.padding--verticals {
  @include units($variation: (top: true, bottom: true));
}

.padding-horizontal--3halves {
  padding-left: 1.5rem !important;
  padding-right: 1.5rem !important;
}

.no-padding {
  padding: 0 !important;
}

.small-no-padding {
  @media #{$small-only} {
    padding: 0 !important;
  }
}

.medium-margin-top {
  @media #{$medium-up} {
    margin-top: 1rem;
  }
}

.padding-left-none {
  padding-left: 0 !important;
}

.padding-right-none {
  padding-right: 0 !important;
}

.padding-top-none {
  padding-top: 0 !important;
}

.padding-bottom-none {
  padding-bottom: 0 !important;
}

.no-margin {
  margin: 0 !important;
}

.margin-bottom-none {
  margin-bottom: 0 !important;
}

.margin-top-none {
  margin-top: 0 !important;
}

.margin-left-none {
  margin-left: 0 !important;
}

.margin-right-none {
  margin-right: 0 !important;
}

.margin-bottom-last-child {
  p {
    &:last-child {
      margin-bottom: 0;
    }
  }
}

.min-height--4x {
  min-height: rem-calc(200);
}

.i-block {
  margin: 0 .125rem;
}

.overflow {
  overflow: hidden;
}

.clear {
  &::after { 
   content: "";
   display: block; 
   clear: both;
  }
}
