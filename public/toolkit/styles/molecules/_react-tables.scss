
// Custom react table css

$status-column-width: 216;

.ReactTable {
  position: relative;
  display: flex;
  flex-direction: column;

  * {
    box-sizing: border-box;
  }

  .rt-table {
    flex: auto 1;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    width: 100%;
    border-collapse: collapse;
    overflow: auto;
  }

  .rt-thead {
    flex: 1 0 auto;
    display: flex;
    flex-direction: column;
    user-select: none;
  }

  .rt-thead .rt-th,
  .rt-thead .rt-td {
    position: relative;
    border-right: 1px solid rgba(0, 0, 0, 0.05);
    transition: box-shadow .3s cubic-bezier(.175, .885, .32, 1.275);
    box-shadow: inset 0 0 0 0 transparent;
  }

  .rt-thead .rt-th.-sort-asc,
  .rt-thead .rt-td.-sort-asc {
    box-shadow: inset 0 3px 0 0 rgba(0, 0, 0, 0.6);
  }

  .rt-thead .rt-th.-sort-desc,
  .rt-thead .rt-td.-sort-desc {
    box-shadow: inset 0 -3px 0 0 rgba(0, 0, 0, 0.6);
  }

  .rt-thead .rt-th.-cursor-pointer,
  .rt-thead .rt-td.-cursor-pointer {
    cursor: pointer;
  }

  .rt-thead .rt-th:last-child,
  .rt-thead .rt-td:last-child {
    border-right: 0;
  }

  .rt-thead .rt-resizable-header {
    overflow: visible;
  }

  .rt-thead .rt-resizable-header:last-child {
    overflow: hidden;
  }

  .rt-thead .rt-resizable-header-content {
    // overflow: hidden;
    // text-overflow: ellipsis;
  }

  .rt-thead .rt-header-pivot:after,
  .rt-thead .rt-header-pivot:before {
    left: 100%;
    top: 50%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
  }

  .rt-tbody {
    flex: 99999 1 auto;
    display: flex;
    flex-direction: column;
  }

  .rt-tbody .rt-expandable {
    cursor: pointer;
  }

  .rt-tr-group {
    flex: 1 0 auto;
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }

  .rt-tr {
    flex: 1 0 auto;
    display: inline-flex;
  }

  .rt-th,
  .rt-td {
    flex: 1 0 0;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    transition: .3s ease;
    transition-property: width, min-width, padding, opacity;
    min-width: rem-calc(150);

    &.rt-expandable {
      min-width: auto;
    }

    &.td-min-narrow {
      min-width: rem-calc(120);
    }
  }

  .rt-th {
    display: flex;
    align-items: center;
    white-space: normal;
    text-overflow: inherit;
    line-height: 1.625;

    &:first-of-type {
      min-width: auto;
    }

    &.td-min-narrow {
      min-width: rem-calc(120);
    }
  }

  .rt-th.-hidden,
  .rt-td.-hidden {
    width: 0 !important;
    min-width: 0 !important;
    padding: 0 !important;
    border: 0 !important;
    opacity: 0 !important;
  }

  .rt-expander {
    display: inline-block;
    position: relative;
    margin: 0;
    color: transparent;
    margin: 0 10px;
  }

  .rt-expander:after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-90deg);
    border-left: 5.04px solid transparent;
    border-right: 5.04px solid transparent;
    border-top: 7px solid rgba(0, 0, 0, 0.8);
    transition: all .3s cubic-bezier(.175, .885, .32, 1.275);
    cursor: pointer;
  }

  .rt-expander.-open:after {
    transform: translate(-50%, -50%) rotate(0);
  }

  .rt-resizer {
    display: inline-block;
    position: absolute;
    width: 36px;
    top: 0;
    bottom: 0;
    right: -18px;
    cursor: col-resize;
    z-index: 10;
  }

  .rt-tfoot {
    flex: 1 0 auto;
    display: flex;
    flex-direction: column;
  }

  .rt-noData {
    display: block;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 255, 255, 0.8);
    transition: all .3s ease;
    z-index: 1;
    pointer-events: none;
    padding: 20px;
    color: rgba(0, 0, 0, 0.5);
  }

  .-loading {
    display: block;
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    transition: all .3s ease;
    z-index: -1;
    opacity: 0;
    pointer-events: none;
  }

  .-loading > div {
    position: absolute;
    display: block;
    text-align: center;
    width: 100%;
    top: 50%;
    left: 0;
    font-size: 15px;
    color: rgba(0, 0, 0, 0.6);
    transform: translateY(-52%);
    transition: all .3s cubic-bezier(.25, .46, .45, .94);
}

  .-loading.-active {
    opacity: 1;
    z-index: 2;
    pointer-events: all;
  }

  .-loading.-active > div {
    transform: translateY(50%);
  }

  .rt-resizing .rt-th,
  .rt-resizing .rt-td {
    transition: none !important;
    cursor: col-resize;
    user-select: none;
  }
}

// react-table overrides
.ReactTable {
  @extend table;
  border: $table-border-size;

  .rt-th,
  .rt-td {
    // white-space: normal;
  }

  // table header
  .rt-thead .rt-th,
  .rt-thead .rt-td {
    @extend .th;
    background: $table-head-bg;
    font-size: $table-head-font-size;
    padding: 1.5rem 1rem;
  }

  // table cells
  .rt-tbody .rt-td {
    @extend .td;
    cursor: pointer;
    font-size: .875rem;
    font-weight: 400;
    padding: 1rem 1rem;
  }

  // table rows
  .rt-tbody .rt-tr {
    &:hover {
      &, & + .subcomponent {
        background-color: lighten($primary-tint, 2%);
      }
    }
  }

  // zebra striping
  .rt-tr {
    &.-odd {
      &, & + .subcomponent {
        background: $table-even-row-bg;
      }
    }

    &.-even {
      &, & + .subcomponent {
        background: $white;
      }
    }
  }

  // table filters
  .rt-thead.-filters {
    .rt-tr .rt-th {
      padding: 5px;
    }

    input,
    select {
      margin-bottom: 0;
    }
  }

  &.rt-table-status {
    position: relative;
  }

  // status rows
  .rt-tr-status {
    align-items: stretch;
    min-height: rem-calc(66);

    &:hover {
      background-color: transparent !important;

      .rt-td {
        background-color: $snow !important;
      }
    }

    .rt-td {
      display: flex;
      min-height: rem-calc(66);
      align-items: center;
    }

    &.is {
      @each $color-name, $color-value in $state-wash-colors {
        &-#{"" + $color-name} {
          .rt-td {
            background-color: $color-value !important;
          }
        }

        &-#{"" + $color-name} {
          &:hover {
            .rt-td {
              background-color: darken($color-value, 2%) !important;
            }
          }
        }
      }

      @each $color-name, $color-value in $state-colors {
        &-#{"" + $color-name} {
          .rt-td:first-of-type {
            box-shadow: inset 3px 0 0 0 $color-value !important;
          }
        }
      }
    }

    // invalid row state
    &.is-invalid {

      .rt-td {
        background-color: $alert-tint !important;
      }

      &.is {
        @each $color-name, $color-value in $state-colors {
          &-#{"" + $color-name} {
            .rt-td:first-of-type {
              box-shadow: inset 3px 0 0 0 transparentize($color-value, .5) !important;
            }
          }
        }
      }

      &:hover {
        .rt-td-label-invalid {
          display: none;
        }

        .rt-td-label-rank {
          display: block;
        }

        .rt-td {
          background-color: $alert-tint !important;
        }
      }

      .rt-td-label-invalid {
        display: block;
      }

      .rt-td-label-rank {
        display: none;
      }
    }

    .rt-td-label-invalid {
      display: none;
    }

    .rt-td {
      align-self: center;
      flex: 1 1 auto;

      &:first-of-type {
        padding-left: 1.5rem;
      }

      &.auto-width {
        flex: 0 0 auto;
      }
    }

    // status cell with dropdown
    .td-status {
      overflow: visible;

      .dropdown {
        opacity: 1;
      }

      .button {
        min-width: rem-calc(150);
        margin-bottom: 0;
      }
    }
  }

  // right fixed column
  .tr-fixed-right,
  .td-fixed-right {
    position: absolute !important;
    width: rem-calc($status-column-width) !important;
    right: 0;
  }

  .td-fixed-right {
    min-height: rem-calc(66);

    .rt-resizer {
      display: none;
    }
  }

  .tr-fixed-right {
    min-height: rem-calc(87);
    border-left: 1px solid rgba(0, 0, 0, 0.05);
  }

  .td-offset-right {
    min-width: rem-calc(300);
    padding-right: rem-calc($status-column-width + 16) !important;

    .rt-resizer {
      display: none;
    }
  }

  // plain cell coloring
  &.rt-table-status {
    .rt-td {
      border-bottom: 1px solid $smoke;

      &.text-right {
        * {
          margin-left: auto;
        }
      }
    }

    .rt-tr {
      background: transparent;

      &,
      & + .subcomponent,
      .rt-td {
        background: $white;
      }
    }
  }
}